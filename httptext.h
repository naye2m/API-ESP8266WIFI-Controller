String homeHTML = R"HTML_asdlkSJLJfl(
<!DOCTYPE html> <html lang=en> <head> <meta charset=UTF-8> <meta name=viewport content="width=device-width,initial-scale=1"> <title>ESP8266 API Controller</title> <style>:root{--GRAY3:#333;--brand-hue:211;--btn-bg:hsl(var(--brand-hue), 100%, 50%);--btn-bg-hover:hsl(var(--brand-hue), 100%, 35%);--off-white:#ddd;--white99:#f8f9fa;--white:white;--black:black;--brand-warning:hsl(16, 100%, 50%);--brand-warning-dark:hsl(16, 100%, 20%);--brand-warning-light:hsl(16, 100%, 75%)}body{font-family:Arial,sans-serif;margin:20px}h1{color:var(--GRAY3)}.container{margin-top:20px}.section{margin-bottom:20px}.button{margin:5px;padding:10px;border:none;border-radius:5px;background-color:var(--btn-bg);color:var(--white);cursor:pointer}.button:hover{background-color:var(--btn-bg-hover)}input[type=number],input[type=text],select{margin:5px;padding:10px;border-radius:5px;border:1px solid var(--off-white)}textarea{margin:5px;padding:10px;border-radius:5px;border:1px solid var(--off-white);width:100%;height:100px}.response{margin-top:10px;padding:10px;border:1px solid var(--off-white);border-radius:5px;background-color:var(--white99)}canvas{border:5px solid var(--black);margin:0 auto;box-sizing:border-box;display:block;padding:3px;background:#ccc}#output{border:2px solid var(--black);background-color:var(--off-white);color:var(--GRAY3);border-radius:5vw;padding:2vw}#output.error{border-color:currentColor solid;background-color:var(--brand-warning-light);color:var(--brand-warning-dark)}</style> </head> <body> <h1>ESP8266 API Controller</h1> <div class=container> <div id=output class=""></div> <div class=section> <h2>LED Control</h2> <button class=button onclick='sendRequest("/led/on")'>Turn LED On</button> <button class=button onclick='sendRequest("/led/off")'>Turn LED Off</button> <br> <input type=number id=blinktimes> <button class=button onclick='sendRequest("/led/blink?times="+(5|document.getElementById("blinktimes").value))'>Blink LED</button> <input type=number id=ledBrightness placeholder="Brightness (0-255)"> <button class=button onclick=setLEDBrightness()>Set LED Brightness</button> </div> <div class=section> <h2>Display Control</h2> <textarea id=displayText placeholder="Enter text to display"></textarea> <input type=number id=textSize placeholder="Text Size (1-3)"> <input type=number id=textX placeholder="X Position"> <input type=number id=textY placeholder="Y Position"> <button class=button onclick=displayText()>Display Text</button> <button class=button onclick='sendRequest("/cleanDisplay")'>Clear Display</button> <input type=checkbox id=clearBeforeRender> Clear Before Render <button class=button onclick=setClearBeforeRender()>Set Clear Before Render</button> </div> <div class=section> <h2>Pixel Control</h2> <input type=number id=pixelX placeholder="X Position"> <input type=number id=pixelY placeholder="Y Position"> <input type=number id=pixelState placeholder="State (0=Off, 1=On)"> <button class=button onclick=setPixel()>Set Pixel</button> </div> <div class=section> <h2>Shape Drawing</h2> <select id=shapeType> <option value=rect onselect="shapeH.hidden=!1">Rectangle</option> <option value=circle onselect="shapeH.hidden=!0">Circle</option> </select> <input type=number id=shapeX placeholder="X Position"> <input type=number id=shapeY placeholder="Y Position"> <input type=number id=shapeW placeholder=Width/Radius> <input type=number id=shapeH placeholder="Height (only for rectangle)"> <button class=button onclick=drawShape()>Draw Shape</button> </div> <div class=section> <h2>Text Animation</h2> <textarea id=animateText placeholder="Enter text to animate"></textarea> <input type=number id=animateSize placeholder="Text Size (1-3)"> <input type=number id=animateY placeholder="Y Position"> <input type=number id=animateRepeats placeholder="Repeats (1-10)"> <button class=button onclick=animateText()>Animate Text</button> </div> <div class=section> <h2>2D Array Control</h2> <textarea id=displayArray placeholder="Enter 128x64 array data as a binary string"></textarea> <button class=button onclick=set2DArray()>Set 2D Array</button> </div> <div class=section> <h2>Draw on Canvas</h2> <canvas id=drawCanvas width=128 height=64></canvas> <button onclick=sendBytearrData()>Send Canvas Data</button> </div> <div class=section> <h2>Func functionality</h2> <select id=func__funcname> <option value=disp>disp</option> <option value=ledBlink>ledBlink</option> <option value=ledBrightness>ledBrightness</option> <option value=pixel>pixel</option> <option value=shape>shape</option> <option value=animateText>animateText</option> <option value=2DArray>2DArray</option> <option value=clearBeforeRender>clearBeforeRender</option> <option value=qr>qr</option> <option value=bytearray>bytearray</option> <option value=serialprint>serialprint</option> <option value=bytearr selected>bytearr</option> </select> <input id=func__funcbody placeholder="{helptext : 'body of function'}"> <button onclick=sendfunc()>Send Canvas Data</button> </div> </div> <script>"use strict";function serverOut(OUTPUT_CODE,...texts){console.log(OUTPUT_CODE,...texts);let error=OUTPUT_CODE,text="";error&&(text+="ERROR : \n"),text+=texts.map((e=>"string"==typeof e?e:JSON.stringify(e))).join("\n");let output=document.getElementById("output");output.innerText=text,error?output.classList.add("error"):output.classList.remove("error")}async function func(b){return console.log(b),await sendRequest("/func","POST",b)}async function sendRequest(endpoint,method="GET",body=null,outfunc=serverOut){let options={method:method};body&&(options.headers={"Content-Type":"application/x-www-form-urlencoded"},options.body=new URLSearchParams(body).toString());try{const response=await fetch(endpoint,options);outfunc(0,await response.text())}catch(error){outfunc(1,error,"endpoint : ",endpoint,"options : ",options)}}function setLEDBrightness(){const brightness=255-document.getElementById("ledBrightness").value%255;""!==brightness&&sendRequest("/led/brightness","POST",{level:brightness})}function displayText(){sendRequest("/display","POST",{plain:document.getElementById("displayText").value,size:document.getElementById("textSize").value,x:document.getElementById("textX").value,y:document.getElementById("textY").value})}function setClearBeforeRender(){sendRequest("/clearBeforeRender","POST",{clear:document.getElementById("clearBeforeRender").checked})}function setPixel(){const x=document.getElementById("pixelX").value,y=document.getElementById("pixelY").value,state=document.getElementById("pixelState").value;if(""!==x&&""!==y&&""!==state){sendRequest("/pixel","POST",{x:x,y:y,state:state})}}function drawShape(){const type=document.getElementById("shapeType").value,x=document.getElementById("shapeX").value,y=document.getElementById("shapeY").value,w=document.getElementById("shapeW").value,h=document.getElementById("shapeH").value;let params="";"rect"===type?""!==x&&""!==y&&""!==w&&""!==h&&(params={type:"rect",x:x,y:y,w:w,h:h}):"circle"===type&&""!==x&&""!==y&&""!==w&&(params={type:"circle",x:x,y:y,r:w}),params&&sendRequest("/shape","POST",params)}function animateText(){const text=document.getElementById("animateText").value,size=document.getElementById("animateSize").value,y=document.getElementById("animateY").value,repeats=document.getElementById("animateRepeats").value;if(""!==text){sendRequest("/animateText","POST",{text:text,size:size,y:y,repeats:repeats})}}function set2DArray(){const arrayData=document.getElementById("displayArray").value;if(""!==arrayData){sendRequest("/setArray","POST",{plain:arrayData})}}window.autoupdate=!0;const canvas=document.getElementById("drawCanvas"),ctx=canvas.getContext("2d");let drawing=!1;charset=Array(256).fill().map(((e,i)=>String.fromCharCode(i))).join("");let code2char=n=>charset[n];function canvas2ASCII(threshold=128,displayArea=8192){let h=ctx.getImageData(0,0,canvas.width,canvas.height,{colorSpace:"display-p3",willReadFrequently:!0}).data,e=(h.reduce(((s,cv)=>s+(cv>1))),Array(displayArea));for(let i=0;i<h.length/4&&h[4*i+3]<h.length;i++)e[i]=h[4*i+3];let gs=new Uint8Array(displayArea/4);for(let i=0;i<gs.length;i++)gs[i]=Array(8).fill(null).reduce(((sum,cv,j,arr)=>sum|(e[4*i+j]>threshold?1<<j:0)));let s=String.fromCharCode(...gs);return s=s.replace(/\x00{0,}$/g,"").replace("\0",""),s}function sendfunc(){let f={name:document.getElementById("func__funcname").value,body:document.getElementById("func__funcbody").value};if(f.json=JSON.parse(f.body),"[object Object]"!=f.json?.toString())return alert("funcbody is not an object;");document.getElementById("func__funcbody").value=JSON.stringify(f.json),f.json.func=f.name,func(f.json)}</script> <script>function startDrawing(e){drawing=!0,ctx.beginPath(),ctx.moveTo(getX(e),getY(e))}function stopDrawing(){drawing=!1,ctx.closePath()}function draw(e){drawing&&(ctx.lineTo(getX(e),getY(e)),ctx.stroke())}function getX(e){return e.touches,e.offsetX}function getY(e){return e.touches,e.offsetY}function canvasToByteArray(){const imageData=ctx.getImageData(0,0,canvas.width,canvas.height).data;let byteArray=[];for(let y=0;y<canvas.height;y++)for(let x=0;x<canvas.width;x+=8){let byte=0;for(let bit=0;bit<8;bit++){const index=4*(y*canvas.width+(x+bit));byte|=((imageData[index]+imageData[index+1]+imageData[index+2])/3<128?1:0)<<7-bit}byteArray.push(String.fromCharCode(byte))}return byteArray.join()}function sendCanvasData(){const byteArray=canvasToByteArray();func({func:"ByteArray",ByteArray:byteArray})}function sendBytearrData(){const byteArray=canvas2ASCII();func({func:"bytearr",data:byteArray,clear:"",escape_char:16})}canvas.addEventListener("mousedown",startDrawing),canvas.addEventListener("touchstart",startDrawing),canvas.addEventListener("mouseup",stopDrawing),canvas.addEventListener("touchend",stopDrawing),canvas.addEventListener("onblur",stopDrawing),canvas.addEventListener("mousemove",draw),canvas.addEventListener("touchmove",draw)</script> 
   )HTML_asdlkSJLJfl";
